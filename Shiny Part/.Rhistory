cor(hp , wt)
ggplot(mtcars , aes(wt , hp)) + geom_point(size = 4 , color = 'darkred') + geom_smooth(method = 'lm' , size = 1.5)
mtcars$hp[mtcars$hp > 300]
mtcars[mtcars$hp > 300]
mtcars[mtcars$hp > 300 , ]
mtcars = -mtcars[mtcars$hp > 300 , ]
View(mtcars)
rm(mtcars)
data(mtcars)
attach(mtcars)
View(mtcars)
mtcars2 = mtcars[-mtcars$hp > 300 , ]
mtcars2
mtcars2 = mtcars[mtcars$hp < 300 , ]
ggplot(mtcars2 , aes(wt , hp)) + geom_point(size = 4 , color = 'darkred') + geom_smooth(method = 'lm' , size = 1.5)
mtcars2 = mtcars[mtcars$hp < 245 , ]
ggplot(mtcars2 , aes(wt , hp)) + geom_point(size = 4 , color = 'darkred') + geom_smooth(method = 'lm' , size = 1.5)
mtcars2[wt > 3 & hp > 150, ]
mtcars2[wt < 3 & hp > 150, ]
fit2 = lm(mpg ~ hp + disp + wt , data = mtcars)
fit2
fit2$residuals
fit2$coefficients
predict(fit2)
predict(fit)
fit1
fit
ggplot(mtcars2 , aes(hp , mpg)) + geom_point(size = 4 , color = 'darkred') + geom_smooth(method = 'lm' , size = 1.5)
predict(fit , newdata = c(130 , 300))
predict(fit , newdata = 130
)
coef(fit)[1] + coef(fit)[2] * 130
coef(fit)[1] + coef(fit)[2] * c(130 , 300)
coef(fit2)
fit2
coef(fit2)[1] + coef(fit2)[2] * 110 + coef(fit2)[3] * 160 + coef(fit)[4] * 2.62
coef(fit2)[1] + coef(fit2)[2] * 110 + coef(fit2)[3] * 160 + coef(fit2)[4] * 2.62
library(datasets)
rm(list = ls())
data(swiss)
?swiss
swiss
View(swiss)
sapply(swiss , function(x) sum(is.na(x)))
install.packages('GGally')
library(GGally)
library(ggplot2)
g = ggpairs(swiss)
g
g = ggpairs(swiss , lower = list(continuous = 'smooth'))
g
g = ggpairs(swiss , lower = list(continuous = 'smooth') , params = c(method = 'loess'))
g = ggpairs(swiss , lower = list(continuous = 'smooth'))
g
hist(swiss$Catholic)
summary(lm(Fertility ~ . , data = swiss))
summary(lm(Fertility ~ . , data = swiss))$coef
summary(lm(Fertility ~ . - 1, data = swiss))$coef
summary(lm(Fertility ~ . , data = swiss))$coef
summary(lm(Fertility ~ . , data = swiss))
qt(c(0.005 , 0.995) , df = 41)
qt(c(0.025 , 0.975) , df = 41)
?runif
summary(lm(Fertility ~ . , data = swiss))$coef
z = swiss$Agriculture + swiss$Examination
summary(lm(Fertility ~ . + z , data = swiss))$coef
rm(Z)
rm(z)
install.packages('rgl')
library(rgl)
with(swiss , plot3d(Fertility , Agriculture , Examination))
fit = lm(Fertility ~ Agriculture + Examination , data = swiss)
fit
summary(fit)
0.00000356
resid(fit)
resid(fit)[1]
resid(fit)
fit2 = lm(Fertility ~ Education , data = swiss)
plot(fit2)
plot(fit2)
library(ggplot2)
memory.limit()
ggplot(swiss , aes(x = Education , y = Fertility)) + geom_point(size = 4) + geom_smooth(method = 'lm')
ggplot(swiss , aes(x = Education , y = Fertility)) + geom_point(size = 4 , color = 'darkgreen' , alpha = 0.6) + geom_smooth(method = 'lm')
ggplot(swiss , aes(x = Education , y = Fertility)) + geom_point(size = 4 , color = 'darkgreen' , alpha = 0.6) + geom_smooth(method = 'lm') + abline(intercept = 60 , slope = -1)
ggplot(swiss , aes(x = Education , y = Fertility)) + geom_point(size = 4 , color = 'darkgreen' , alpha = 0.6) + geom_smooth(method = 'lm') + abline(a = c(60 , -1))
ggplot(swiss , aes(x = Education , y = Fertility)) + geom_point(size = 4 , color = 'darkgreen' , alpha = 0.6) + geom_smooth(method = 'lm')
resid(fit2)
sum(resid(fit2))
mean(resid(fit2))
hatvalues(fit2)
rstandard(fit2)
rstudent(fit2)
resid(fit2)
hatvalues(fit2)
plot(hatvalues(fit2))
plot(sort(hatvalues(fit2) , decreasing = FALSE))
anova(fit2)
anova(fit)
anova(fit , fit2)
data(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$am <- factor(mtcars$am)
levels(mtcars$am) <- c('-auto', '-manual')
fit <- lm(mpg ~ cyl + wt, mtcars)
summary(fit)$coef
View(g)
rm(g)
fit = lm(Fertility ~ Agriculture + Examination + Education , data = swiss)
fit
summary(fit)
t.test(fit)
anova(fit)
anova(fit)$Response
anova(fit)[1:3 , 2]
sum(anova(fit)[1:3 , 2])
anova(fit)[4 , 2] / sum(anova(fit)[1:3 , 2])
log(0.25)
plot(log())
e^0.25 / (1 + e^0.25)
exp(0.25) / (1 + exp(0.25))
exp(0.25)
confint(fit)
confint(fit , level = 0.9)
confint(fit , level = 0.99)
confint(fit)
confint(fit)[1 , ]
confint(fit)$Agr
confint(fit)$Agriculture
confint(fit)['Agriculture' , ]
a = c('a' , 'b' , 'c')
'b' %in% a
library(dplyr)
a %>% contains('b')
contains(a , 'b')
fit$fitted.values
hatvalues(fit)
fit$df.residual
fit$fitted.values
fit$fitted.values['Lausanne']
plot(fit$fitted.values)
plot(fit$fitted.values)
points(swiss$Fertility , color = 'red')
points(swiss$Fertility , col = 'red')
exp
ei
pi
exp1
exp(1)
pi - exp(1)
library(ggplot2)
data(mtcars)
head(mtcars, n=3)
dim(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
attach(mtcars)
testResults <- t.test(mpg ~ am)
testResults$p.value
testResults$estimate
fullModelFit <- lm(mpg ~ ., data = mtcars)
summary(fullModelFit)  # results hidden
summary(fullModelFit)$coeff  # results hidden
stepFit <- step(fullModelFit)
summary(stepFit) # results hidden
summary(stepFit)$coeff # results hidden
sum((abs(dfbetas(stepFit)))>1)
boxplot(mpg ~ am,
xlab="Transmission Type (0 = Automatic, 1 = Manual)",
ylab="MPG",
main="MPG by Transmission Type")
par(mfrow = c(2, 2))
plot(stepFit)
install.packages('kernlab')
library(kernlab)
kernlab::cross()
rm(g)
library(kernlab)
data(spam)
rm(swiss , g)
View(spam)
View(spam)
dataframe.split??
?
]
??dataframe.split
split
install.packages()
install.packages('caret')
library(caret)
intrain = createDataPartition(y = spam$type , p = 0.75 , list = FALSE)
train = spam[intrain , ]
test = spam[-intrain , ]
View(test)
?train
set.seed(123)
rnorm(10)
rnorm(10)
rnorm(10)
rnorm(10)
rnorm(10)
modelfit = train(type ~ . , data = train , method = 'glm')
install.packages('e1071')
library(e1071)
modelfit = caret::train(type ~ . , data = train , method = 'glm')
modelfit
modelfit$accuracy
modelfit$accuracy
modelfit[1]
modelfit[2]
modelfit[3]
modelfit[4]
modelfit$results
modelfit$results$Accuracy
predictions = predictionFunction(method = 'glm' , modelFit = modelfit , newdata = test)
predictions = predictionFunction(modelFit = modelfit , newdata = test)
predictions = predict(modelfit , newdata = test)
table(predictions)
table(predictions , spam$type)
confusionMatrix(predictions , spam$type)
table(predictions , test$type)
confusionMatrix(predictions , test$type)
mat = confusionMatrix(predictions , test$type)
mat$positive
mat$table
mat$table$Prediction
mat$table[1 , 1]
library(kernlab)
rm(list = ls())
args(train)
args(train.default)
args(train.kernlab)
library(caret)
args(caret::train)
args(trainControl)
args(train)
train
?train
?install.packages
install.packages('Hmisc')
library(Hmisc)
cut2
?cut2
??grid.arrange
library(gridExtra)
data(spam)
library(kernlab)
data(spam)
inTrain = createDataPartition(spam , p = 0.75 , list = FALSE)
inTrain = createDataPartition(spam , times = 1 , p = 0.75 , list = FALSE)
inTrain = createDataPartition(spam$type , times = 1 , p = 0.75 , list = FALSE)
training = spam[inTrain , ]
testing = spam[-inTrain , ]
hist(training$type)
View(training)
sapply(training , var)
mean(sapply(training , var))
str(training)
sapply(training[ , -c('type')] , var)
sapply(training[ , -"type"] , var)
sapply(training[ , -c("type")] , var)
sapply(training[ , -58] , var)
mean(sapply(training , var))
sapply(training[,-58] , var)
cor(training[ , -58])
abs(cor(training[ , -58]))
cor_table = abs(cor(training[ , -58]))
which(cor_table > 0.8)
which(cor_table > 0.8 , arr.ind = T)
diag(cor_table) = 0
which(cor_table > 0.8 , arr.ind = T)
which(cor_table > 0.85 , arr.ind = T)
which(cor_table > 0.95 , arr.ind = T)
cor_table[34 , 32]
mean(cor_table)
hist(cor_table)
plot(training$num415 , training$num857)
prcomp(training[ , c(32 , 34)])
prcomp(training[ , c(32 , 34)])$x
apply(prcomp(training[ , c(32 , 34)]) , 2 , sd)
apply(prcomp(training[ , c(32 , 34)])$x , 2 , sd)
v32 = (training[ , 32] - mean(training[ , 32]) / sd(training[ , 32])
)
sd(v32)
sd(v32)
v34 = (training[ , 34] - mean(training[ , 34]) / sd(training[ , 34]))
sd(v34)
var(v32)
var(v34)
rm(v32 , v34)
installed.packages()
installed.packages()[1]
'randomForest' %in% installed.packages()
library(randomForest)
install.packages('randomForest')
library(randomForest)
?randomForest
fit_model = train(type ~ . , data = training , method = 'rf')
fit_model = train(type ~ . , data = training , method = 'glm')
confusionMatrix(fit_model)
predictions = predict(fit_model , newdata = testing$type)
rm(fit_model , cor_table)
rf_model = randomForest(type ~ . , data = training)
plot(rf_model)
importance(rf_model)
prediction = predict(rf_model , newdata = testing)
head(prediction , 20)
confusionMatrix(prediction , testing$type)
confusionMatrix(prediction , training$type)
confusionMatrix(prediction , testing$type)
lm_model = lm(type ~ . , data = training)
prediction_rf = prediction
rm(prediction)
confusionMatrix(prediction , testing$type)$accuracy
rf_table = confusionMatrix(prediction , testing$type)
confusionMatrix(prediction_rf , testing$type)$accuracy
confusionMatrix(prediction_rf , testing$type)[1]
confusionMatrix(prediction_rf , testing$type)$Acc
confusionMatrix(prediction_rf , testing$type)[2]
confusionMatrix(prediction_rf , testing$type)[3]
confusionMatrix(prediction_rf , testing$type)$overall$Accuracy
confusionMatrix(prediction_rf , testing$type)$overall
confusionMatrix(prediction_rf , testing$type)$overall[1]
rf_accuracy = confusionMatrix(prediction_rf , testing$type)$overall[1]
prediction_lm = predict(lm_model , testing)
confusionMatrix(prediction_lm , testing$type)
summary(lm_model)
lm_model
rm(lm_model , prediction_lm)
glm_model(type ~ . , data = training)
glm_model = train(type ~ . , data = training)
glm_model = train(type ~ . , data = training , method = 'glm')
??NaiveBayes
library(e1071)
nb_model = naiveBayes(type ~ . , data = training)
rm(glm_model)
nb_model
prediction_nb = predict(nb_model , testing)
confusionMatrix(prediction_nb , testing$type)
nb_accuracy = confusionMatrix(prediction_nb , testing$type)$overall[1]
train_control = trainControl(method = 'cv' , number = 10)
trian_control
train_control
model = train(type ~ . , data = training , trControl = train_control , method = 'nb')
model = train(type ~ . , data = training , trControl = train_control , method = 'nb')
model
prediction_cv = predict(model , testing)
confusionMatrix(prediction_cv , testing$type)
rm(nb_accuracy , nb_model , train_control , prediction_cv , prediction_nb)
rm(model)
confusionMatrix(prediction_rf , testing$type)
importance_rf = importance(rf_model)
head(importance())
head(importance_rf
)
importance_rf = round(importance(rf_model) , 2)
head(importance_rf)
library(dplyr)
importance_rf %>% order_by()
head(importance_rf)
importance_rf %>% arrange()
importance_rf %>% arrange(MeandecreaseGini)
with(importance_rf , sort(MeanDecreaseGini))
sort(importance_rf)
varImportance = data.frame(Variables = row.names(importance_rf) , Importance = round(importance_rf[ , 2] , 2))
varImportance = data.frame(Variables = row.names(importance_rf) , Importance = round(importance_rf[ , 1] , 2))
View(varImportance)
varImportance %>% arrange(Importance)
varImportance %>% arrange(desc(Importance))
varImportance %>% arrange(desc(Importance)) %>% n(20)
varImportance %>% arrange(desc(Importance)) %>% top_n(20)
sum(varImportance$Importance)
new_variables = with(varImportance , which(Importance > 50))
varImportance[ , c(5 , 7)]
varImportance[c(5 , 7) , ]
new_training = training[ , new_variables]
new_testing = testing[ , new_variables]
rm(new_testing , new_training)
new_training = training[ , c(new_variables , 'type')]
new_training = training[ , c(new_variables , 58)]
new_testing = testing[ , c(new_variables , 58)]
new_rf_model = randomForest(type ~ . , data = new_training)
new_prediction_rf = predict(new_rf_model , new_testing)
confusionMatrix(new_prediction_rf , new_testing)
str(new_testing)
table(new_prediction_rf , new_testing)
table(new_prediction_rf , testing)
new_prediction_rf
prediction_rf
table(new_prediction_rf , prediction_rf)
length(new_prediction_rf)
length(new_testing$type)
confusionMatrix(new_prediction_rf , new_testing$type)
new_rf_accuracy = confusionMatrix(new_prediction_rf , new_testing$type)$overall[1]
varImportance %>% arrange(Importance) %>% top_n(20)
varImportance %>% arrange(Importance)
varImportance %>% arrange(Importance) %>% head(20)
new2_variables = with(varImportance , which(Importance < 3))
new2_training = training[ , c(new2_variables , 58)]
new2_testing = testing[ , c(new2_variables , 58)]
new2_rf_model = randomForest(type ~ . , data = new2_training)
new2_prediction_rf = predict(new2_rf_model , new2_testing)
confusionMatrix(new2_prediction_rf , new2_testing$type)
(680 + 333) / (17 + 120)
(680 + 333) / (17 + 120 + 680 + 333)
?randomForest
rf_model_2 = randomForest(type ~ . , data = training , ntree = 600 , importance = T)
prediction_rf_2 = predict(rf_model_2 , testing)
confusionMatrix(prediction_rf_2 , testing$type)
rf_model_2 = randomForest(type ~ . , data = training , importance = T)
prediction_rf_2 = predict(rf_model_2 , testing)
confusionMatrix(prediction_rf_2 , testing$type)
install.packages('ROCR')
library(ROCR)
rf_model_2 = randomForest(type ~ . , data = training , importance = T)
rf_model_2$err.rate
prediction_rf_2 = predict(rf_model_2 , testing)
confusionMatrix(prediction_rf_2 , testing$type)
data("iris")
head(iris)
library(caret)
library(randomForest)
intrain = createDataPartition(iris$Species , p = 0.7 , list = FALSE)
training = iris[intrain , ]
testing = iris[-intrain , ]
modelFit = train(Species ~ . , data = training , method = 'rpart')
modelFit$finalModel
print(modelFit$finalModel)
plot(modelFit$finalModel)
plot(modelFit$finalModel , uniform = T)
text(modelFit$finalModel)
text(modelFit$finalModel , all = T)
install.packages('rattke')
install.packages('rattle')
library(rattle)
fancyRpartPlot(modelFit$finalModel)
predictions = predict(modelFit , testing)
confusionMatrix(predictions , testing$Species)
library(caret)
library(randomForest)
data("iris")
intrain = createDataPartition(iris$Species , p = 0.7 , list = F)
training = iris[intrain , ]
testing = iris[-intrain , ]
rf_model = train(Species ~ . , data = training , method = 'rf')
rf_model
rm(list = ls())
data("iris")
rf_model = train(Species ~ . , data = training , method = 'rf')
rf_model = train(Species ~ . , data = iris , method = 'rf')
rf_model
getTree(rf_model , k = 24)
getTree(rf_model$finalModel , k = 24)
getTree(rf_model$finalModel , k = 26)
getTree(rf_model$finalModel , k = 100)
rf_model
rf_model = train(Species ~ . , data = iris , method = 'rf' , na.action = na.omit)
rf_model
set.seed(123)
?set.seed
rf_model1 = train(Species ~ . , data = iris , method = 'rf' , na.action = na.omit)
rf_model2 = train(Species ~ . , data = iris , method = 'rf' , na.action = na.omit)
combine(rf_model1 , rf_model2)
rm(rf_model1 , rf_model2)
rf_model$method
rf_model$modelInfo
rf_model$pred
rf_model$call
rf_model$metric
rf_model$resample
rf_model$finalModel
rf_model = train(Species ~ . , data = iris , method = 'rf' , na.action = na.omit)
rf_model$finalModel
rm(rf_model)
rf1 = randomForest(Species ~ . , data = iris , ntree = 500 , na.action = na.omit)
rf1
rf2 = randomForest(Species ~ . , data = iris , ntree = 500 , na.action = na.omit)
rf2
rf3 = randomForest(Species ~ . , data = iris , ntree = 500 , na.action = na.omit)
rf3
combine(rf1 , rf2 , rf3)
combine(rf1 , rf2 , rf3)$finalModel
rftotal = combine(rf1 , rf2 , rf3)
rftotal$finalModel
rftotal
rm(rf1 , rf2 , rf3 , rftotal)
?rfcv
View(iris)
library(ggplot2)
qplot(Sepal.Length , Petal.Length)
qplot(Sepal.Length , Petal.Length , data = iris)
??corrplot
install.packages('corrplot')
install.packages('shiny')
library(shiny)
runApp('D:/Desktop HDD/coursera/data_science/Developing Data Products/myApp.R')
runApp('D:/Desktop HDD/coursera/data_science/Developing Data Products/myApp.R')
setwd("D:/Desktop HDD/coursera/data_science/Developing Data Products/myApp.R")
runApp()
getwd()
runApp("D:/Desktop HDD/coursera/data_science/Developing Data Products/myApp.R/ui.R")
runApp("D:/Desktop HDD/coursera/data_science/Developing Data Products/myApp.R")
runApp("D:\Desktop HDD\coursera\data_science\Developing Data Products\myApp.R")
runApp("D:/Desktop HDD/coursera/data_science/Developing Data Products/myApp.R")
rsconnect::showLogs(account = "myshinyioaccount", appName = "myapp")
shinyapps::showLogs(account = "myshinyioaccount", appName = "myapp")
install.packages('shinyapps')
runApp()
